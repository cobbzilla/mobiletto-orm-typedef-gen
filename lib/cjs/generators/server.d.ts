import { MobilettoOrmTypeDef, MobilettoOrmTypeDefConfig } from "mobiletto-orm-typedef";
import { GenerateOptions } from "../generate.js";
export declare const genApiEndpoint: (apiTemplate: string, typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions, ctx?: Record<string, string>) => string;
export declare const generateApiIdGet: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions, singletonDefault?: string, singletonDefaultImport?: string) => string;
export declare const generateApiIdPut: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions) => string;
export declare const generateApiIdPatch: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions) => string;
export declare const generateApiIdDelete: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions) => string;
export declare const generateApiIndexPost: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions, utilsImportPath?: string) => string;
export declare const generateApi: (typeDef: MobilettoOrmTypeDef | MobilettoOrmTypeDefConfig, typeDefPackage: string, opts?: GenerateOptions, singletonDefault?: string, singletonDefaultImport?: string, utilsImportPath?: string) => Record<string, string>;
export declare const generateErrorFilter: (typeDefPackage: string, opts?: GenerateOptions, logger?: string, loggerImport?: string) => string;
export declare const generateSessionFilter: (typeDefPackage: string, opts?: GenerateOptions, AccountType?: string, SessionType?: string, SESSION_HEADER?: string, sessionHeaderImport?: string, SESSION_COOKIE_NAME?: string, sessionCookieNameImport?: string, cookieOptions?: string, cookieOptionsImport?: string, errorFilterImport?: string, sessionRepository?: string, sessionRepositoryImport?: string, accountRepository?: string, accountRepositoryImport?: string) => string;
